package com.virtual_machine;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author arsalan
 */
public class DashboardScreen extends javax.swing.JFrame {

    /**
     * Creates new form DashboardScreen
     */
    Memory memory;
    Register register;
    PQueue queue;
    Stack stack;
    InstructionDecoder fetch;
    DisplayCommandScreen display;

    public DashboardScreen(Memory memory, Register register, PQueue queue, Stack stack, InstructionDecoder fetch, DisplayCommandScreen display) throws FileNotFoundException, IOException {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Pictures/icon.jpg")));
        this.memory = memory;
        this.register = register;
        this.queue = queue;
        this.stack = stack;
        this.fetch = fetch;
        this.display = display;
        stack.updateStack();
        configureUI();
        showMessage("\t\t\t          Welcom To DINOLIX\n");
        fetch.Print_Info();
    }

    private void configureUI() {
        this.setPreferredSize(new Dimension(1300, 600));
        this.setMaximumSize(new Dimension(1300, 600));
        this.setMinimumSize(new Dimension(1300, 600));
        this.setBounds(30, 50, 1300, 600);
        disableButtons();
        disableRemaining();
    }

    private void showMessage(String message) {
        Main.append(message);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        UnBlock = new javax.swing.JButton();
        Runp = new javax.swing.JButton();
        DebugP = new javax.swing.JButton();
        DebugA = new javax.swing.JButton();
        RunA = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        KillP = new javax.swing.JButton();
        Clone = new javax.swing.JButton();
        Block = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        PrintProcess = new javax.swing.JComboBox();
        DisplayP = new javax.swing.JButton();
        DisplayM = new javax.swing.JButton();
        Dump = new javax.swing.JButton();
        FramesF = new javax.swing.JButton();
        MemDetails = new javax.swing.JButton();
        FramesA = new javax.swing.JButton();
        Registers = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Main = new javax.swing.JTextArea();
        jButton17 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        PIDs = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        Info = new javax.swing.JTextArea();
        Power = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        Stack = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Users\\ARSALAN\\Desktop"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DINOLIX");
        setResizable(false);
        getContentPane().setLayout(null);

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setLayout(null);

        UnBlock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Unblock.jpg"))); // NOI18N
        UnBlock.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UnBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnBlockActionPerformed(evt);
            }
        });
        jPanel2.add(UnBlock);
        UnBlock.setBounds(890, 30, 90, 60);

        Runp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Run_P.jpg"))); // NOI18N
        Runp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Runp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunpActionPerformed(evt);
            }
        });
        jPanel2.add(Runp);
        Runp.setBounds(120, 30, 90, 60);

        DebugP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Debug_P.jpg"))); // NOI18N
        DebugP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DebugP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DebugPActionPerformed(evt);
            }
        });
        jPanel2.add(DebugP);
        DebugP.setBounds(230, 30, 90, 60);

        DebugA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Debug_A.jpg"))); // NOI18N
        DebugA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DebugA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DebugAActionPerformed(evt);
            }
        });
        jPanel2.add(DebugA);
        DebugA.setBounds(340, 30, 90, 60);

        RunA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Run_A.jpg"))); // NOI18N
        RunA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RunA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunAActionPerformed(evt);
            }
        });
        jPanel2.add(RunA);
        RunA.setBounds(450, 30, 90, 60);

        Load.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Load.jpg"))); // NOI18N
        Load.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });
        jPanel2.add(Load);
        Load.setBounds(10, 30, 90, 60);

        KillP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Kill_P.jpg"))); // NOI18N
        KillP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        KillP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KillPActionPerformed(evt);
            }
        });
        jPanel2.add(KillP);
        KillP.setBounds(560, 30, 90, 60);

        Clone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Clone.jpg"))); // NOI18N
        Clone.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Clone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloneActionPerformed(evt);
            }
        });
        jPanel2.add(Clone);
        Clone.setBounds(670, 30, 90, 60);

        Block.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Block.jpg"))); // NOI18N
        Block.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Block.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockActionPerformed(evt);
            }
        });
        jPanel2.add(Block);
        Block.setBounds(780, 30, 90, 60);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Wood-Backgrounds-Picture.jpg"))); // NOI18N
        jPanel2.add(jLabel3);
        jLabel3.setBounds(0, -10, 1000, 140);

        jScrollPane5.setViewportView(jPanel2);

        jTabbedPane2.addTab("Process", jScrollPane5);

        jPanel1.setLayout(null);

        PrintProcess.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "List Process", "List - a", "List - b", "List - r", "List - e" }));
        PrintProcess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PrintProcess.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PrintProcessItemStateChanged(evt);
            }
        });
        PrintProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintProcessActionPerformed(evt);
            }
        });
        jPanel1.add(PrintProcess);
        PrintProcess.setBounds(30, 30, 120, 40);

        DisplayP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/PCB.jpg"))); // NOI18N
        DisplayP.setToolTipText("");
        DisplayP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DisplayP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayPActionPerformed(evt);
            }
        });
        jPanel1.add(DisplayP);
        DisplayP.setBounds(170, 30, 90, 60);

        DisplayM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Page_Table.jpg"))); // NOI18N
        DisplayM.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DisplayM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayMActionPerformed(evt);
            }
        });
        jPanel1.add(DisplayM);
        DisplayM.setBounds(290, 30, 90, 60);

        Dump.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Memory_Dump.jpg"))); // NOI18N
        Dump.setToolTipText("");
        Dump.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Dump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DumpActionPerformed(evt);
            }
        });
        jPanel1.add(Dump);
        Dump.setBounds(410, 30, 90, 60);

        FramesF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Free_Frames.jpg"))); // NOI18N
        FramesF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FramesF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FramesFActionPerformed(evt);
            }
        });
        jPanel1.add(FramesF);
        FramesF.setBounds(530, 30, 90, 60);

        MemDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Memory_Details.jpg"))); // NOI18N
        MemDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MemDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MemDetailsActionPerformed(evt);
            }
        });
        jPanel1.add(MemDetails);
        MemDetails.setBounds(640, 30, 90, 60);

        FramesA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Allocated Frames1.jpg"))); // NOI18N
        FramesA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        FramesA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FramesAActionPerformed(evt);
            }
        });
        jPanel1.add(FramesA);
        FramesA.setBounds(750, 30, 90, 60);

        Registers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Registers.jpg"))); // NOI18N
        Registers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Registers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistersActionPerformed(evt);
            }
        });
        jPanel1.add(Registers);
        Registers.setBounds(870, 30, 90, 60);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Wood-Backgrounds-Picture.jpg"))); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(0, 0, 1000, 130);

        jScrollPane6.setViewportView(jPanel1);

        jTabbedPane2.addTab("Display", jScrollPane6);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(160, 390, 1000, 150);

        Main.setEditable(false);
        Main.setBackground(new java.awt.Color(0, 0, 0));
        Main.setColumns(20);
        Main.setForeground(new java.awt.Color(255, 255, 255));
        Main.setRows(5);
        Main.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(Main);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(280, 20, 700, 340);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Clear.jpg"))); // NOI18N
        jButton17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton17);
        jButton17.setBounds(1180, 390, 90, 60);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Process Id's: ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 370, 90, 20);

        PIDs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PIDs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIDsActionPerformed(evt);
            }
        });
        getContentPane().add(PIDs);
        PIDs.setBounds(70, 390, 70, 30);

        Info.setEditable(false);
        Info.setBackground(new java.awt.Color(0, 0, 0));
        Info.setColumns(20);
        Info.setForeground(new java.awt.Color(255, 255, 255));
        Info.setRows(5);
        jScrollPane2.setViewportView(Info);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(980, 20, 310, 340);

        Power.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Power", "Hibernate", "Shut Down" }));
        Power.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Power.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PowerActionPerformed(evt);
            }
        });
        getContentPane().add(Power);
        Power.setBounds(1180, 490, 100, 30);

        Stack.setEditable(false);
        Stack.setBackground(new java.awt.Color(0, 0, 0));
        Stack.setColumns(20);
        Stack.setForeground(new java.awt.Color(255, 255, 255));
        Stack.setRows(5);
        jScrollPane3.setViewportView(Stack);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 20, 270, 340);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Wood-Backgrounds-Picture.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1340, 580);

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PrintProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintProcessActionPerformed
        // TODO add your handling code here:
        Object obj = new Object();
        obj = PrintProcess.getSelectedItem();

        if (obj.toString().equals("List - a")) {

            showMessage("  -> Showing All Processes\n");
            display.setVisible(true);
            display.Set_Tab(0);
            display.Set_Listp(null, 0);
            display.Set_Listp("\t\t      List of All Processes\n\n", 1);
            int l = register.getQ1Counter();
            Runnable r = new Runnable() {
                public void run() {
                    fetch.ListP(0, display);

                }
            };
            Thread th = new Thread(r);
            th.start();
            //queue.showPQueue();
        } else if (obj.toString().equals("List - b")) {

            showMessage("  -> Showing Blocked Processes\n");
            display.setVisible(true);
            display.Set_Tab(0);
            display.Set_Listp(null, 0);
            display.Set_Listp("\t\t     List of Blocked Processes", 1);
            Runnable r = new Runnable() {
                public void run() {
                    fetch.ListP(1, display);
                }
            };
            Thread th = new Thread(r);
            th.start();
        } else if (obj.toString().equals("List - r")) {
            showMessage("  -> Showing All Processes in Ready State\n");
            display.setVisible(true);
            display.Set_Tab(0);
            display.Set_Listp(null, 0);
            display.Set_Listp("\t\t      List of Processes in Ready State", 1);
            Runnable r = new Runnable() {
                public void run() {
                    fetch.ListP(2, display);

                }
            };
            Thread th = new Thread(r);
            th.start();
        } else if (obj.toString().equals("List - e")) {

            showMessage("  -> Showing All Processes in Running State\n");
            display.setVisible(true);
            display.Set_Tab(0);
            display.Set_Listp(null, 0);
            display.Set_Listp("\t\t      List of Processes in Running State", 1);
            Runnable r = new Runnable() {
                public void run() {
                    fetch.ListP(3, display);

                }
            };
            Thread th = new Thread(r);
            th.start();
        }
    }//GEN-LAST:event_PrintProcessActionPerformed

    private void FramesAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FramesAActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display Allocated Frames Command----------------------\n");
        display.setVisible(true);
        display.Set_Tab(6);
        display.Set_AllotFrames(null, 0);
        Runnable r = new Runnable() {
            public void run() {
                fetch.Allocated_Frames(display);

            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_FramesAActionPerformed

    private void MemDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemDetailsActionPerformed
        //   new details().setVisible(true);

        disableButtons();
        showMessage("\n----------------------Display Memory Details Command----------------------\n");
        display.setVisible(true);
        display.Set_Tab(5);
        display.Set_MemDetails(null, 0);

        Runnable r = new Runnable() {
            public void run() {
                fetch.Mem_Details(display);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_MemDetailsActionPerformed

    private void RunpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunpActionPerformed
        // TODO add your handling code here:

        disableButtons();
        showMessage("\n----------------------Execute Process Command----------------------\n");
        Object obj = new Object();
        if (PIDs.isEnabled()) {
            obj = PIDs.getSelectedItem();//.getSelectedValue();

            final byte id = (byte) Integer.parseInt(obj.toString());
            Runnable r = new Runnable() {
                public void run() {
                    try {
                        fetch.Run_p(id);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };

            Thread thr1 = new Thread(r);
            thr1.start();
        }
    }//GEN-LAST:event_RunpActionPerformed

    private void DisplayPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayPActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display PCB Command----------------------\n");
        display.setVisible(true);
        display.Set_Tab(1);
        display.Set_DisPcb(null, 0);
        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        final byte id = (byte) Integer.parseInt(obj.toString());
        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Display_PCB(id, display);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_DisplayPActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:

        disableButtons();
        showMessage("\n----------------------Load Command----------------------\n");

        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            showMessage("\nLoading Process To Memory\n");

            File file = jFileChooser1.getSelectedFile();
            final String link = file.toString(), FileName = file.getName();

            showMessage(link + "\n");
            try {
                memory.Store_Mem(memory, register, queue, FileName, link, fetch, stack);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException ex) {
                Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            showMessage("\nCannot Load File As User Not Selected Any File....\n");

        }
        disableButtons();
    }//GEN-LAST:event_LoadActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        Main.setText(null);
        showMessage("\t\t\t          Welcom To DINOLIX\n");

    }//GEN-LAST:event_jButton17ActionPerformed

    private void DebugPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DebugPActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Debug Process Command----------------------\n");

        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();

        final byte id = (byte) Integer.parseInt(obj.toString());

        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Debug_p(id);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_DebugPActionPerformed

    private void KillPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KillPActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Kill Process Command----------------------\n");

        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        final byte id = (byte) Integer.parseInt(obj.toString());
        Runnable r = new Runnable() {
            public void run() {
                fetch.Kill_p(id);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
        disableButtons();
    }//GEN-LAST:event_KillPActionPerformed

    private void CloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloneActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Create Clone Command----------------------\n");

        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        final byte id = (byte) Integer.parseInt(obj.toString());

        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Clone(id);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_CloneActionPerformed

    private void BlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Block Process Command----------------------\n");

        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        final byte id = (byte) Integer.parseInt(obj.toString());

        Runnable r = new Runnable() {
            public void run() {

                fetch.Block(id);

            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_BlockActionPerformed

    private void UnBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnBlockActionPerformed
        // TODO add your handling code here:

        disableButtons();
        showMessage("\n----------------------UnBlock Process Command----------------------\n");

        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();

        final byte id = (byte) Integer.parseInt(obj.toString());
        Runnable r = new Runnable() {
            public void run() {
                fetch.UnBlock(id);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_UnBlockActionPerformed

    private void DisplayMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayMActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display Page Table Command----------------------\n");

        display.setVisible(true);
        display.Set_Tab(2);
        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        display.Set_DisPt(null, 0);

        final byte id = (byte) Integer.parseInt(obj.toString());
        Runnable r = new Runnable() {
            public void run() {

                fetch.Display_PT(id, display);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_DisplayMActionPerformed

    private void DumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DumpActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display Memory Dump Command----------------------\n");

        display.setVisible(true);
        display.Set_Tab(3);
        Object obj = new Object();
        obj = PIDs.getSelectedItem();//.getSelectedValue();
        display.Set_MemDump(null, 0);

        final byte id = (byte) Integer.parseInt(obj.toString());
        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Dump_Mem(id, display);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_DumpActionPerformed

    private void PrintProcessItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PrintProcessItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_PrintProcessItemStateChanged

    private void PIDsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIDsActionPerformed
        // TODO add your handling code here:

        PIDs.getSelectedIndex();
        if (PIDs.getSelectedIndex() >= 0 && PIDs.getSelectedIndex() <= 128) {
            enableButtons();
        }
        if (PIDs.getItemCount() == 0) {
            disableAll();
        }

    }//GEN-LAST:event_PIDsActionPerformed

    private void FramesFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FramesFActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display Free Frames Command----------------------\n");

        display.setVisible(true);
        display.Set_Tab(4);
        display.Set_FreeFrames(null, 0);

        Runnable r = new Runnable() {
            public void run() {
                memory.Show_Free_Frames(display);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_FramesFActionPerformed

    private void RegistersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistersActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Display Registers Command----------------------\n");

        display.setVisible(true);
        display.Set_Tab(7);
        display.Set_DisReg(null, 0);
        Runnable r = new Runnable() {
            public void run() {
                fetch.Display_Reg(display);
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
        // register.showGeneralPurposeRegisters();
        // register.showSpecialPurposeRegisters();
    }//GEN-LAST:event_RegistersActionPerformed

    private void DebugAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DebugAActionPerformed
        // TODO add your handling code here:

        disableButtons();
        showMessage("\n----------------------Debug All Command----------------------\n");

        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Debug_a();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_DebugAActionPerformed

    private void RunAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunAActionPerformed
        // TODO add your handling code here:
        disableButtons();
        showMessage("\n----------------------Execute All Command----------------------\n");

        Runnable r = new Runnable() {
            public void run() {

                try {
                    fetch.Run_a();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };

        Thread thr1 = new Thread(r);
        thr1.start();
    }//GEN-LAST:event_RunAActionPerformed

    private void PowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PowerActionPerformed
        // TODO add your handling code here:

        Object obj = new Object();
        obj = Power.getSelectedItem();//  .getSelected Item();

        if (obj.toString() == "Hibernate") {
            File theDir = new File("Hib");
            boolean chk = theDir.mkdir();
            showMessage("Preparing For Hibernate!!!!!!!\n");

            PrintWriter op1 = null, op2 = null;
            File memory = new File("Hib\\Memory.txt");
            File reg = new File("Hib\\Reg.txt");

            try {
                op1 = new PrintWriter("Hib\\Memory.txt");
                if (memory.length() != 0) {
                    op1.write("");
                }

                for (int i = 0; i < 65536; i++) {
                    op1.write(String.valueOf(this.memory.Get_Mem_Val(i)) + " ");
                }
                op1.close();
                //     
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            Runnable r = new Runnable() {
                public void run() {
                    try {
                        Thread.sleep(1500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.exit(1);
                }
            };

            Thread thr1 = new Thread(r);

            try {
                op2 = new PrintWriter("Hib\\Reg.txt");
                if (reg.length() != 0) {
                    op2.write("");
                }

                // next to lines commented for testing, used to write array in file
                for (int i = 0; i < 16; i++) {
                    op2.write(String.valueOf((byte) (((register.getSpecialPurposeRegister(i)) >> 8) & 0xFF)) + " ");
                    op2.write(String.valueOf((byte) ((register.getSpecialPurposeRegister(i)) & 0xFF)) + " ");
                    // op2.write (String.valueOf(register.getSpecialPurposeRegister(i)) + " ");
                }
                for (int i = 0; i < 16; i++) {
                    op2.write(String.valueOf((byte) (((register.getGeneralPurposeRegister(i)) >> 8) & 0xFF)) + " ");
                    op2.write(String.valueOf((byte) ((register.getGeneralPurposeRegister(i)) & 0xFF)) + " ");
                    // op2.write (String.valueOf(register.getGeneralPurposeRegister(i)) + " ");
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
            op2.close();
            fetch.Shut_Down();
            thr1.start();
        } else if (obj.toString() == "Shut Down") {
            Runnable r = new Runnable() {
                public void run() {
                    ShutDown S = new ShutDown();
                    S.setVisible(true);
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(DashboardScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    S.setVisible(false);
                    System.exit(1);
                }
            };

            Thread thr1 = new Thread(r);

            showMessage("Preparing For Shut Down!!!!!!!!!!!\n");
            fetch.Shut_Down();

            thr1.start();

        }
    }//GEN-LAST:event_PowerActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton Block;
    public static javax.swing.JButton Clone;
    public static javax.swing.JButton DebugA;
    public static javax.swing.JButton DebugP;
    public static javax.swing.JButton DisplayM;
    public static javax.swing.JButton DisplayP;
    public static javax.swing.JButton Dump;
    public static javax.swing.JButton FramesA;
    public static javax.swing.JButton FramesF;
    public static javax.swing.JTextArea Info;
    public static javax.swing.JButton KillP;
    public static javax.swing.JButton Load;
    public static javax.swing.JTextArea Main;
    public static javax.swing.JButton MemDetails;
    public static javax.swing.JComboBox PIDs;
    private javax.swing.JComboBox Power;
    public static javax.swing.JComboBox PrintProcess;
    public static javax.swing.JButton Registers;
    public static javax.swing.JButton RunA;
    public static javax.swing.JButton Runp;
    public static javax.swing.JTextArea Stack;
    public static javax.swing.JButton UnBlock;
    private javax.swing.JButton jButton17;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables

    private void disableButtons() {
        Runp.setEnabled(false);
        DebugP.setEnabled(false);
        KillP.setEnabled(false);
        UnBlock.setEnabled(false);
        Clone.setEnabled(false);
        Block.setEnabled(false);
        DisplayP.setEnabled(false);
        DisplayM.setEnabled(false);
        Dump.setEnabled(false);
    }

    private void enableButtons() {
        Runp.setEnabled(true);
        KillP.setEnabled(true);
        DebugP.setEnabled(true);
        Clone.setEnabled(true);
        Block.setEnabled(true);
        UnBlock.setEnabled(true);
        DisplayM.setEnabled(true);
        DisplayP.setEnabled(true);
        Dump.setEnabled(true);
        enableRemaining();
    }

    public void disableRemaining() {
        RunA.setEnabled(false);
        DebugA.setEnabled(false);
        MemDetails.setEnabled(false);
        FramesA.setEnabled(false);
        PrintProcess.setEnabled(false);
    }

    public void enableRemaining() {
        RunA.setEnabled(true);
        DebugA.setEnabled(true);
        MemDetails.setEnabled(true);
        FramesA.setEnabled(true);
        PrintProcess.setEnabled(true);
    }

    public void disableAll() {
        disableButtons();
        disableRemaining();
    }
}
